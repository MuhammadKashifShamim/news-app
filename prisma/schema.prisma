// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          Int                    @id @default(autoincrement())
  title       String
  content     String
  headerImage String?
  likes       Int                    @default(0)
  views       Int                    @default(0)
  published   Boolean                @default(false)
  author      User?                  @relation(fields: [authorId], references: [id])
  authorId    String?
  createdAt   DateTime               @default(now()) @map(name: "created_at")
  updatedAt   DateTime               @updatedAt @map(name: "updated_at")
  categories  CategoriesOnArticles[]
}

model Category {
  id          Int                    @id @default(autoincrement())
  title       String
  description String?
  icon        String?
  articles    CategoriesOnArticles[]
}

model CategoriesOnArticles {
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId  Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([articleId, categoryId])
}

model Gallery {
  id      String  @id @default(cuid())
  title   String
  url     String
  type    String
  altText String?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  articles      Article[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_token      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
